{
  "NativeWind List Component Template": {
    "prefix": "nw-list", // the trigger text in VSCode
    "body": [
      "import { Icon } from '@roninoss/icons';",
      "import { useQuery } from '@tanstack/react-query';",
      "import { router, Stack, useLocalSearchParams } from 'expo-router';",
      "import { Info } from 'lucide-react-native';",
      "import { Platform, RefreshControl, View } from 'react-native';",
      "",
      "import { ErrorView } from '~/components/core/error-view'; //! remove or rename if you don't have ErrorView",
      "import Loading from '~/components/core/loading';",
      "import {",
      "  List,",
      "  ListItem,",
      "  ListRenderItemInfo,",
      "  ListSectionHeader,",
      "  ExtendedListDataItem,",
      "} from '~/components/nativewindui/List';",
      "import { Text } from '~/components/nativewindui/Text';",
      "import { useColorScheme } from '~/lib/useColorScheme';",
      "import { trpc } from '~/utils/api';",
      "// Main component name placeholder",
      "export default function ${1:MyListScreen}() {",
      "",
      "  //! Example: Extract route params if needed",
      "  const { id } = useLocalSearchParams<{ id: string }>();",
      "",
      "  //! Replace with dynamic useQuery or other data fetching logic",
      "  const { data, isPending, isRefetching, error, isError, refetch } = useQuery(",
      "    trpc.group.all.queryOptions()",
      "  );",
      "",
      "  //! optional: handle error state",
      "  if (isError) return <ErrorView message={error?.message} onRetry={refetch} />;",
      "",
      "  // Map the data to the shape needed for the List",
      "  const DATA: ExtendedListDataItem[] =",
      "    data?.map((item) => ({",
      "      id: item.id,",
      "      title: item.title || 'Title',",
      "      subTitle: item.subTitle || '',",
      "      value: item.value || '',",
      "      onPress: () => {",
      "        // Example navigation using expo-router",
      "        router.push(`/detail/${item.id}`);",
      "      },",
      "    })) || [];",
      "",
      "  return (",
      "    <>",
      "      {/* //! Optional Stack.Screen Placeholder */}",
      "      <Stack.Screen",
      "        options={{",
      "          headerShown: true,",
      "          headerTransparent: false,",
      "          headerShadowVisible: false,",
      "          headerTitle: '${4:List Component}',",
      "        }}",
      "      />",
      "",
      "      <List",
      "        variant=\"insets\"",
      "        data={DATA}",
      "        renderItem={renderItem}",
      "        sectionHeaderAsGap={Platform.OS === 'ios'}",
      "        ListEmptyComponent={isPending ? <Loading /> : <ListEmpty />}",
      "        ListHeaderComponent={<ListHeader />} //! remove if no header needed",
      "        ListFooterComponent={<ListFooter />} //! remove if no footer needed",
      "        refreshControl={<RefreshControl refreshing={isRefetching} onRefresh={refetch} />}",
      "        contentInsetAdjustmentBehavior=\"automatic\"",
      "      />",
      "    </>",
      "  );",
      "}",
      "",
      "//! Example: Custom List Header - remove if not needed",
      "function ListHeader() {",
      "  return (",
      "    <View className=\"mb-4 px-4\">",
      "      <Text className=\"text-lg font-medium\" variant=\"title1\">",
      "        Header",
      "      </Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "//! Example: Custom List Footer - remove if not needed",
      "function ListFooter() {",
      "  return (",
      "    <View className=\"mt-4 px-4\">",
      "      <Text className=\"text-lg font-medium\" variant=\"title1\">",
      "        Footer",
      "      </Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "// Displayed when the list is empty (e.g., no data).",
      "function ListEmpty() {",
      "  return (",
      "    <View className=\"flex-1 items-center justify-center\">",
      "      <Info className=\"mb-2 h-6 w-6 text-muted-foreground\" />",
      "      <Text className=\"text-center text-sm text-muted-foreground\">No items found</Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "// Wrapper to pass the item info to the actual Item component",
      "function renderItem(info: ListRenderItemInfo<ExtendedListDataItem>) {",
      "  return <Item info={info} />;",
      "}",
      "",
      "// The actual ListItem (row) component.",
      "function Item({ info }: { info: ListRenderItemInfo<ExtendedListDataItem> }) {",
      "  const { colors } = useColorScheme();",
      "  // If it's a string, treat it as a section header",
      "  if (typeof info.item === 'string') {",
      "    return <ListSectionHeader {...info} />;",
      "  }",
      "",
      "  return (",
      "    <ListItem",
      "      {...info}",
      "      target=\"Cell\"",
      "      variant=\"insets\"",
      "      //! optional primary text if onPress is true",
      "      // titleClassName={info.item.onPress && 'ios:text-primary'}",
      "      rightView={",
      "        <View className=\"flex-1 flex-row items-center gap-0.5 px-2\">",
      "          {!!info.item.value && <Text className=\"text-muted-foreground\">{info.item.value}</Text>}",
      "          {info.item.onPress && <Icon name=\"chevron-right\" size={22} color={colors.grey2} />}",
      "        </View>",
      "      }",
      "      disabled={info.item.disabled}",
      "      onPress={info.item.onPress}",
      "    />",
      "  );",
      "}",
    ],
    "description": "Creates a template for a NativeWind List component with optional Stack.Screen, dynamic useQuery, error handling, and placeholders for custom header/footer.",
  },
  "NativeWind Form Component Template": {
    "prefix": "nw-form",
    "body": [
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import { router } from 'expo-router';",
      "import { useForm } from 'react-hook-form';",
      "import { z } from 'zod';",
      "",
      "import { Form, FormItem, FormSection, FormTextField } from '~/components/nativewindui/Form';",
      "import { Text } from '~/components/nativewindui/Text';",
      "import { FormScrollView } from '~/components/core/form-scroll-view';",
      "",
      "const ${1:formName}Schema = z.object({",
      "  ${2:field}: z.string().min(1, '${3:Field is required}'),",
      "});",
      "",
      "type ${1:formName}SchemaType = z.infer<typeof ${1:formName}Schema>;",
      "",
      "export default function ${4:FormPage}() {",
      "  const form = useForm<${1:formName}SchemaType>({",
      "    resolver: zodResolver(${1:formName}Schema),",
      "    defaultValues: {",
      "      ${2:field}: '',",
      "    },",
      "  });",
      "",
      "  const onSubmit = async (data: ${1:formName}SchemaType) => {",
      "    // Handle form submission",
      "    ${5:// Add your submission logic here}",
      "  };",
      "",
      "  return (",
      "    <FormScrollView",
      "      title=\"${6:Form Title}\"",
      "      subtitle=\"${7:Form Description}\"",
      "      onSubmit={form.handleSubmit(onSubmit)}",
      "      buttonText=\"${8:Submit}\">",
      "      <Form form={form} className=\"gap-6\">",
      "        <FormSection fields={['${2:field}']}>",
      "          <FormItem>",
      "            <FormTextField",
      "              name=\"${2:field}\"",
      "              accessibilityLabel=\"${2:field}\"",
      "              placeholder=\"${9:Enter ${2:field}}\"",
      "              label=\"${9:Field}\"",
      "            />",
      "          </FormItem>",
      "        </FormSection>",
      "      </Form>",
      "    </FormScrollView>",
      "  );",
      "}",
    ],
    "description": "Creates a template for a NativeWind Form component with Zod validation, react-hook-form integration, and FormScrollView wrapper.",
  },
}
